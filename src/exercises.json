{"2048-ai-exercise":
  "# HTML\n\n<style>\ndiv.Game {\n}\n\ndiv.Row {\n  display:flex;\n  justify-content:center\n}\n\ndiv.Cell {\n  color:white;\n  font:24px sans-serif;\n  text-align:center;\n  margin:4px;\n  padding:20px 4px;\n  border:4px solid #aaa;\n  width:64px;\n  height:32px;\n  background:#ccc;\n}\n\ndiv.Cell.val-0 {}\ndiv.Cell.val-2 {background:#aaf;border-color:#00f}\ndiv.Cell.val-4 {background:#88f;border-color:#007}\ndiv.Cell.val-8 {background:#00f;border-color:#007}\ndiv.Cell.val-16 {background:#5eb;border-color:#0a4}\ndiv.Cell.val-32 {background:#098;border-color:#031}\ndiv.Cell.val-64 {background:#054;border-color:#020}\ndiv.Cell.val-128 {background:#fd6;border-color:#ed2}\ndiv.Cell.val-256 {background:#ed0;border-color:#fe1}\ndiv.Cell.val-512 {background:#da0;border-color:#ed2}\ndiv.Cell.val-1024 {background:#b5a;border-color:#109}\ndiv.Cell.val-2048 {background:#109;border-color:#00f}\n\ndiv.topbar{\n  display:flex;\n  flex-flow:column;\n  align-items:center;\n  padding:16px\n}\n\nspan.score{\n  margin:4px 16px\n}\n\ndiv.controls{\n  margin:32px auto;\n  display:flex;\n  flex-flow:column nowrap;\n  align-items:center;\n  width:256px\n}\n\ndiv.controls button {\n  height:64px;\n  width:64px;\n  margin:4px\n}\n\ndiv.error {color:red}\n</style>\n\n<div id=container>\n</div>\n\n# JSX\n\nfunction init(){\n  var game\n  game=\n    {width:4\n    ,height:4\n    ,rows:[]\n    ,score:0\n    ,autoplay_fail_count:0\n    ,last_move_effect:true\n    ,autoplaying:false\n    }\n  game.rows=empty_board(game)\n  game = randomly_add_tile(game)\n  return game\n}\n\nfunction copy(game){\n  var ret=Object.assign({},game)\n  ret.rows=empty_board(game)\n  iter_cells(ret,(c,i,j,k) => at_k(game,k))\n  return ret}\n\nfunction empty_board(game){\n  var rows=[]\n  for(i=0; i<game.height; i++){\n    rows.push(row=[])\n    for(j=0; j<game.width; j++){row.push(0)}}\n  return rows\n}\n\nfunction randomly_add_tile(game){\n  var empty=0,cp\n  cp=copy(game)\n  iter_cells(cp,c => {if(c==0) empty++})\n  if(!empty) return cp\n  var chosen = Math.floor(Math.random()*empty)\n  var seen = 0\n  iter_cells(cp,(c,i,j,k) => {\n    if(c != 0) return cp\n    if(seen++==chosen) return Math.random() > 0.9 ? 4 : 2\n  })\n  return cp\n}\n\nfunction iter_cells(game,f){\n  game.rows.forEach((r,i) => r.forEach((c,j) => {\n    var ret = f(c,i,j,i*game.width+j)\n    if(typeof ret == \"number\") game.rows[i][j] = ret}))}\n\nfunction at_ij(game,i,j,c){\n  if(i<0 || j<0 || i>=game.height || j>=game.width) return\n  if(c!=undefined) game.rows[i][j]=c\n  return game.rows[i][j]}\n\nfunction at_k(game,k,c){\n  if(k < 0 || k > game.width*game.height) return\n  if(c!=undefined) game.rows[Math.floor(k/game.width)][k%game.width]=c\n  return game.rows[Math.floor(k/game.width)][k%game.width]}\n\nfunction is_lost(game){\n  return !legal_moves.some(m => move_only(game,m).last_move_effect)}\n\nfunction move_only(game,mov){\n  var x,y,cp\n  cp=copy(game)\n  switch(mov){\n  case \"up\": x=0;y=-1;break\n  case \"down\": x=0;y=1;break\n  case \"left\": x=-1;y=0;break\n  case \"right\": x=1;y=0;break\n  default: throw new Error('unknown move: '+mov)}\n  var moved,transposed,flipped\n  if(y != 0){\n    ;[x,y] = [y,x]\n    transpose(cp)\n    transposed=true\n  }\n  if(x==1){\n    x=-1\n    flip_x(cp)\n    flipped=true\n  }\n  moved = move_left(cp)\n  if(flipped) flip_x(cp)\n  if(transposed) transpose(cp)\n  cp.last_move_effect=moved\n  return cp}\n\nfunction move(game,mov){\n  var cp=move_only(game,mov)\n  if(cp.last_move_effect) cp=randomly_add_tile(cp)\n  return cp\n}\n\nfunction move_render(mov){\n  game = move(game,mov)\n  render()}\n\nfunction move_left(game){\n  var moved=false\n  moved = move_left_many(game)\n  moved = merge_left_once(game) || moved\n  moved = move_left_many(game) || moved\n  return moved}\n\nfunction move_left_many(game){\n  var moved=false, count=0\n  while(move_left_once(game)) moved=true;\n  return moved}\n\nfunction move_left_once(game){\n  var moved=false\n  iter_cells(game,(c,i,j,k) => {\n    if(c==0) return\n    var left=at_ij(game,i,j-1)\n    if(left==0){\n      at_ij(game,i,j-1,c)\n      at_k(game,k,0)\n      moved=true\n    }\n  })\n  return moved\n}\n\nfunction merge_left_once(game){\n  var merged=false\n  iter_cells(game,(c,i,j,k) => {\n    if(c==0)return\n    var left=at_ij(game,i,j-1)\n    if(left==c){\n      at_ij(game,i,j-1,c*2)\n      at_k(game,k,0)\n      merged=true\n      game.score+=c*2\n    }\n  })\n  return merged\n}\n\nfunction transpose(game){\n  var next=copy(game)\n  next.width=game.height\n  next.height=game.width\n  next.rows=empty_board(next)\n  iter_cells(next,(c,i,j,k) => at_ij(game,j,i))\n  //alert(JSON.stringify(game)+'\\n'+JSON.stringify(next))\n  Object.assign(game,next)\n}\n\nfunction flip_x(game){\n  var next=copy(game)\n  iter_cells(next,(c,i,j,k) => at_ij(game,i,game.width-1-j))\n  Object.assign(game,next)\n}\n\nfunction Row(props){\n  return <div className=\"Row\">\n    {props.cells.map((c,i) => <Cell key={i} n={c}/>)}\n  </div>}\n\nfunction Cell(props){\n  return <div className={\"Cell val-\"+props.n}>{props.n||\"\"}</div>}\n\nfunction TwentyFortyEight(props){\n  var game=props.game\n  return (\n    <div className=\"Game\">\n    <div className=\"topbar\">\n      <span className=\"score\">{game.score}</span> <button onClick={new_game}>New</button><button onClick={auto_play}>{game.autoplaying?'stop':'autoplay'}</button>\n    </div>\n      {game.rows.map((r,i) => <Row key={i} cells={r} game={game}/>)}\n    <div className=\"controls\">\n      <button onClick={up}/>\n      <div>\n      <button onClick={left}/>\n      <button onClick={down}/>\n      <button onClick={right}/>\n      </div>\n    </div>\n    </div>)\n  function up(){if(!game.autoplaying)move_render('up')}\n  function down(){if(!game.autoplaying)move_render('down')}\n  function left(){if(!game.autoplaying)move_render('left')}\n  function right(){if(!game.autoplaying)move_render('right')}}\n\nfunction TwentyFortyEightAIRunner(props){\n  var game=props.game,results=props.results,\n    avg_score,runs,last_score,tot=0,instructions\n  results.forEach(n => tot+=n)\n  runs = results.length\n  avg_score = tot/runs || 0\n  last_score = results[results.length-1] || 0\n  return (\n    <div className=\"Game\">\n    <div className=\"topbar\">\n      <div>runs: {runs} last: {last_score} avg: {avg_score}</div>\n      <div><span className=\"score\">{game.score}</span> <button onClick={auto_play}>autoplay</button></div>\n      <div className=\"error\">{error_message}</div>\n    </div>\n      {game.rows.map((r,i) => <Row key={i} cells={r} game={game}/>)}\n    </div>)}\n\nvar game\n\nvar error_message=\"\"\n\nvar results=[]\n\nfunction save_result(game){\n  results.push(game.score)\n}\n\nfunction new_game(){\n  game=init()\n  render()}\n\nfunction auto_play(){\n  //new_game()\n  if(game.autoplaying) return game.autoplaying=false\n  game.autoplaying=true\n  setTimeout(auto_play_step,500)}\n\nfunction auto_play_step(){\n  if(!game.autoplaying) return\n  try{move_render(ai_player(game))}\n  catch(e){error_message=String(e);render();return}\n  game.autoplay_fail_count =\n    game.last_move_effect ? 0 : game.autoplay_fail_count+1\n  var delay=AI_EXERCISE?50:250\n  if (game.autoplay_fail_count<16) setTimeout(auto_play_step,delay)\n  else {\n    game.autoplaying=false\n    render()\n    if (AI_EXERCISE) {\n      save_result(game)\n      new_game()\n      auto_play()\n    }\n  }\n}\n\nfunction render(){\n  var component,container\n  component =\n    AI_EXERCISE\n      ? <TwentyFortyEightAIRunner game={game} results={results}/>\n      : <TwentyFortyEight game={game}/>\n  container = document.querySelector('#container')\n  ReactDOM.render(component,container)}\n\nvar legal_moves=['up','down','left','right']\n\ndocument.body.onkeydown=function(e){\n  if(AI_EXERCISE) return\n  if(e.keyCode>36&&e.keyCode<41) e.preventDefault()\n  if(game.autoplaying)return\n  if(e.keyCode==37)move_render('left')\n  if(e.keyCode==38)move_render('up')\n  if(e.keyCode==39)move_render('right')\n  if(e.keyCode==40)move_render('down')}\n\nvar AI_EXERCISE = true\n\nsetTimeout(() => new_game(),0)\n\n"
,"clock-exercise":
"<div id=clock></div>\n\n<hr><br><br><br>\n\n<section id=instructions>\n<h2>Instructions</h2>\n<p>Write a function that takes a Date object and returns a string.\n<p>Call the function start_clock, and pass your function to it as an argument.\n<p>Your function will be called once every second, with the current time as a Date object, and the output that your function returns will be displayed on the page.\n<p>This exercise is to get familiar with writing functions in JavaScript, to play with the Date object a little, and most importantly, to understand the principle of callback functions and how they are most typically used.\n\n<h3>Resources</h3>\n<ul>\n  <li>The <a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date>Date object</a> on MDN.\n</ul>\n\n<h3>Variations</h3>\n<ul>\n  <li>You can write this as an anonymous function inlined in the call to start_clock, and as a standalone named function. Whichever one you did, try changing it to the other.\n  <li>You can use HTML in your output, not just text.\n  <li>You aren't limited to implementing a clock. You can use the provided Date object an any way you like, or even ignore it and return an arbitrary string that changes every second.\n</section>\n\n# JavaScript\n\nconst el = document.querySelector('#clock')\n\nfunction start_clock(cb){\n  setInterval(f,1000)\n  function f(){\n    el.innerHTML = cb(new Date())}}\n\n"
}
